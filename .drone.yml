kind: pipeline
name: build base images

steps:
    - name: build-images  
      image: docker:19.03.0
      environment:
        AWS_ACCESS_KEY_ID:
            from_secret: AWS_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY:
            from_secret: AWS_SECRET_ACCESS_KEY
      volumes:
        - name: dockersock
          path: /var/run
      commands:
        - docker system prune -f
      # when:
      #   branch:
      #     exclude:
      #       - master
        
        
        # - docker build --tag $ECR_REGISTRY/ds:${DRONE_COMMIT_SHA:0:8} .
        # - docker tag amster $ECR_REGISTRY/amster:${DRONE_BRANCH//\//-}-${DRONE_COMMIT_SHA:0:8}
        # - docker push $ECR_REGISTRY/amster:${DRONE_BRANCH//\//-}-${DRONE_COMMIT_SHA:0:8}
        # - docker tag am $ECR_REGISTRY/am:${DRONE_BRANCH//\//-}-${DRONE_COMMIT_SHA:0:8}
        # push will only happen when branch is master eventually
        # - docker push $ECR_REGISTRY/am:${DRONE_BRANCH//\//-}-${DRONE_COMMIT_SHA:0:8}


services:
  - name: docker
    image: docker:19.03.0-dind
    privileged: true
    volumes:
    - name: dockersock
      path: /var/run

volumes:
  - name: dockersock
    temp: {}


## NEXT STEPS
# deploy to dev/test environment
# run tests
# docker pull $ECR_REGISTRY/<app_name>:$DRONE_COMMIT_SHA
# docker tag "from_ci" or "tests_passed" etc
# docker push (when branch is master)


# ${DRONE_BRANCH//\//-}-${DRONE_COMMIT_SHA:0:8}