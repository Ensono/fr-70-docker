kind: pipeline
name: build base images

steps:
    - name: build  
      image: debian:stable-slim
      environment:
        AWS_ACCESS_KEY_ID:
            from_secret: AWS_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY:
            from_secret: AWS_SECRET_ACCESS_KEY
      commands:
        - apt update && apt install curl unzip -y
        - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        - unzip -q awscliv2.zip
        - ./aws/install
        - aws s3 sync s3://forgerock7-binaries . --no-progress
        - unzip -q Amster-7.0.0.zip -d amster
        - unzip -q AM-7.0.0.zip -d am
        - ls
        # - unzip -q DS-7.0.0.zip -d ds
        # - unzip -q IG-7.0.0.zip -d ig 
        # - unzip -q IDM-7.0.1.zip -d idm 
        - cd amster/samples/docker
        - ./setup.sh
        - cd /drone/src/am/openam/samples/docker
        - chmod u+x setup.sh
        - sed -i'.tmp' -e 's/[Oo]pen[Aa][Mm]/AM/g' setup.sh
        - ./setup.sh
        - cd images/am-empty
        - chmod u+x docker-entrypoint.sh
        - chmod u+x scripts/*
        - sed -i'.tmp' -e 's/openam.war/AM.war/g' Dockerfile

    - name: build-images  
      image: docker:latest
      environment:
        AWS_ACCESS_KEY_ID:
            from_secret: AWS_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY:
            from_secret: AWS_SECRET_ACCESS_KEY
      volumes:
        - name: dockersock
          path: /var/run
      commands:
        - export ECR_REGISTRY="499815288658.dkr.ecr.eu-west-1.amazonaws.com"
        - apk add --update --no-cache jq curl py-pip
        - pip install awscli
        - $(aws ecr get-login --no-include-email --region eu-west-1)
        - cd amster/samples/docker
        - docker build -t amster .
        - cd /drone/src/am/openam/samples/docker/images/am-empty
        - docker build -t am .

    - name: push-images  
      image: docker:latest
      environment:
        AWS_ACCESS_KEY_ID:
            from_secret: AWS_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY:
            from_secret: AWS_SECRET_ACCESS_KEY
      volumes:
        - name: dockersock
          path: /var/run
      commands:
        - docker tag amster $ECR_REGISTRY/amster:${DRONE_BRANCH//\//-}-${DRONE_COMMIT_SHA:0:8}
        - docker push $ECR_REGISTRY/amster:${DRONE_BRANCH//\//-}-${DRONE_COMMIT_SHA:0:8}
        - docker tag am $ECR_REGISTRY/am:${DRONE_BRANCH//\//-}-${DRONE_COMMIT_SHA:0:8}
        - docker push $ECR_REGISTRY/am:${DRONE_BRANCH//\//-}-${DRONE_COMMIT_SHA:0:8}

services:
  - name: docker
    image: docker:dind
    privileged: true
    volumes:
    - name: dockersock
      path: /var/run

volumes:
  - name: dockersock
    temp: {}


## NEXT STEPS
# deploy to dev/test environment
# run tests
# docker pull $ECR_REGISTRY/<app_name>:$DRONE_COMMIT_SHA
# docker tag "from_ci" or "tests_passed" etc
# docker push (when branch is master)


# ${DRONE_BRANCH//\//-}-${DRONE_COMMIT_SHA:0:8}